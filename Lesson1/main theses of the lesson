ГОЛОВНІ ТЕЗИ ПЕРШОГО ЗАНЯТТЯ (Python basic)

Python — інтерпретована об'єктно-орієнтована мова програмування високого рівня зі строгою динамічною типізацією.

Процес обробки коду Python:
    script.py --> інтерпритатор(в мову нижнього рівня) --> машинний код(byte code) --> віртуальна машина --> Виконання(run)
                                               додаткові бібліотеки-->-^

Процес написання програм:
    проектування --> написання --> тестування --> дебагінг

Парадигми програмування(стиль написання вихідного коду комп'ютерної програми):
    Імперативне програмування:
        парадигма програмування, згідно з якою описується процес отримання результатів як послідовність інструкцій
        зміни стану програми Подібно до того, як за допомогою наказового способу в мовознавстві перелічується
        послідовність дій, що необхідно виконати, імперативні програми є послідовністю операцій комп'ютера для
        виконання. Поширений синонім імперативному програмуванню є процедурне програмування.
    Функціональне програмування:
        парадигма програмування, яка розглядає програму як обчислення математичних функцій та уникає станів та змінних
        даних. Функційне програмування наголошує на застосуванні функцій, на відміну від імперативного програмування,
        яке наголошує на змінах в стані та виконанні послідовностей команд.
    Об'єктно-орієнтоване програмування:
        парадигма програмування, яка розглядає програму як множину «об'єктів», що взаємодіють між собою. Основу ООП
        складають чотири основні концепції: інкапсуляція, успадкування, поліморфізм та абстракція. Однією з переваг ООП
        є краща модульність програмного забезпечення (тисячу функцій процедурної мови, в ООП можна замінити кількома
        десятками класів із своїми методами).

Системи контролю версій - програмний інструмент для керування версіями одиниці інформації: початкового коду програми,
        скрипту, веб-сторінки, вебсайту, 3D-моделі, текстового документу тощо. Системи контролю версій — інструмент,
        який дозволяє одночасно, не заважаючи один одному, проводити роботу над груповими проєктами.
        Системи контролю версіями зазвичай використовуються при розробці програмного забезпечення для відстеження,
        документування та контролю над поступовими змінами в електронних документах: у сирцевому коді застосунків,
        кресленнях, електронних моделях та інших документах, над змінами яких одночасно працюють декілька людей.

        Кожна версія позначається унікальною цифрою чи літерою, зміни документу занотовуються. Зазвичай також
        зберігаються дані про автора зробленої зміни та її час.
        Інструменти для контролю версій входять до складу багатьох інтегрованих середовищ розробки.
        Існують два основні типи систем керування версіями: з централізованим сховищем та розподіленим.

Типи систем контролю версій:
    Централізована система контролю версії (клієнт-серверна) — система, дані в якій зберігаються в єдиному
        «серверному» сховищі. Весь обмін файлами відбувається з використанням центрального сервера. Є можливість
        створення та роботи з локальними репозиторіями (робочими копіями).
            Переваги:
                * загальна нумерація версій;
                * дані знаходяться на одному сервері;
                * можлива реалізація функції блокування файлів;
                * можливість керування доступом до файлів;
            Недоліки:
                * оновлення робочої копії та збереження змін можливе лише за наявності мережевого з'єднання з основним
                  сервером.
        До таких систем відносять Subversion, Concurrent Versions System, Team Foundation Server.

    Розподілена система контролю версії (англ. Distributed Version Control System, DVCS) — система, яка використовує
        замість моделі клієнт-сервер, розподілену модель зберігання файлів. Така система не потребує сервера, адже всі
        файли знаходяться на кожному з комп'ютерів.
            Переваги:
                * Кожний з розробників працює зі своїм власним репозитарієм;
                * Рішення щодо злиття гілок приймається керівником проєкту;
                * Немає потреби в мережевому з'єднанні;
            Недоліки:
                * не можливо контролювати доступ до файлів;
                * відсутня загальна нумерація версій файлів;
                * потрібно значно більше дискового простору на сервері для зберігання всіх гілок як глобальних, так й
                  локальних;
                * відсутня можливість блокування файлів.
        До розподілених систем відносять: Git, Mercurial, Bazaar, Monotone, Codeville, BitKeeper.